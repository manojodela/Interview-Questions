How to check whether a string is palindrome or not ?

const checkPallindrome = (str) => {
   for (let i = 0; i < str.length/2; i++) {
     if (str[i] !== str[str.length - i - 1]) {
        return "Not pallindrome";
     }
   }
   return "pallindrome";
};
console.log(checkPallindrome("amadama"));

---------------------------------------------------------------------
Write a program to remove duplicates from an array ?
 
function removeDuplicates(arr){
   let unique = [];
   for(let i=0; i<arr.length;i++){
     if(unique.indexOf(arr[i]) == -1){
       unique.push(arr[i]);
     }
   }
   return unique;
 }

console.log("unique: ",removeDuplicates([1, 2, 1, 3, 4, 2, 2, 1, 5, 6]))

-------------------------------------------------------------------------------
Write a program to find duplicates from an array ?

function findDuplicates(arr){
  let uniqueArr = [];
  
  for(let i=0;i<arr.length;i++){
    for(let j= i+1; j<arr.length;j++){
      if(arr[i] == arr[j] && !uniqueArr.includes(arr[i])){
        uniqueArr.push(arr[i])
      }
    }
  }
  return uniqueArr;
}


const numbers = [1, 2, 3, 2, 4, 5, 3];
const result = findDuplicates(numbers);
console.log("Duplicates:", result);


--------------------------------------------------------------------------------------

// Function to flatten a nested array
function flattenArray(arr) {
  const flattened = [];

  function recursiveFlatten(arr) {
    arr.forEach(element => {
      if (Array.isArray(element)) {
        recursiveFlatten(element); // Recurse into nested array
      } else {
        flattened.push(element); // Add non-array elements to the result
      }
    });
  }

  recursiveFlatten(arr);
  return flattened;
}

// Function to sort an array
function sortArray(arr) {
  return arr.sort((a, b) => a - b); // Sort in ascending order
}

// Example usage
const nestedArray = [1, [2, -3, [4, -5]], 6, [-7, 8]];
const flattenedArray = flattenArray(nestedArray);
const sortedArray = sortArray(flattenedArray);

console.log("Sorted Array:", sortedArray); // Output: [-7, -5, -3, 1, 2, 4, 6, 8]



// Function to flatten and sort an array in one go
function flattenAndSortArray(arr) {
  return arr.flat(Infinity).sort((a, b) => a - b);
}

// Example usage
const nestedArray = [1, [2, -3, [4, -5]], 6, [-7, 8]];
const sortedArray = flattenAndSortArray(nestedArray);

console.log("Sorted Array:", sortedArray); // Output: [-7, -5, -3, 1, 2, 4, 6, 8]




If you want to sort an array of numbers without using built-in methods, you can implement a simple sorting algorithm like Bubble Sort. Here’s a straightforward implementation using a for loop:

Bubble Sort Implementation

function bubbleSort(arr) {
  let n = arr.length;

  // Outer loop for passes
  for (let i = 0; i < n - 1; i++) {
    // Inner loop for comparison and swapping
    for (let j = 0; j < n - 1 - i; j++) {
      if (arr[j] > arr[j + 1]) {
        // Swap arr[j] and arr[j + 1]
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }

  return arr;
}

// Example usage:
const values = [3, -1, 2, 10, -5, 0, 4];
const sortedValues = bubbleSort(values);
console.log(sortedValues); // Output: [-5, -1, 0, 2, 3, 4, 10]


get result as 13 by adding array index 0,1 or 1,2 or 2,3
array = [1, 3, 10, 11, 14];
goal = 13;

let arr = [];
let obj = {};
for(let i =0; i<array.length; i++){
  let temp = goal - array[i];
  if(obj[temp]){
    console.log(obj[temp], i);
    break;
  }
  obj[array[i]] = i;
}

-------------------------------------------

for(let i=0; i<array.length;i++){
  let flag = false;
  for(let j=0; j<array.length;j++){
    if(array[i]+array[j] == goal){
      console.log([i, j]);
      flag = true;
      break;
    }
  }
  if(flag) break;
  //[ 1, 2 ]

==================================================================================================================
get sum for quantity*price

const array = [
  {product: "milk", quantity: 3, price: 1.50},
  {product: "Burger", quantity: 2, price: 2.50}
  ];
  
  let sum =0;
  for(let i =0; i<array.length; i++){
    sum += array[i].quantity*array[i].price;
  }
  console.log(sum);

==================================================================================================================

console.log(1 +  "2" + "2");  //122
console.log(1 +  +"2" + "2");  //32
console.log(1 +  -"1" + "2");  //02
console.log(+"1" +  "1" + "2");  //112
console.log( "A" - "B" + "2");  //NaN2
console.log( "A" - "B" + 2);  //NaN
----------------------------------------

(function() {
    console.log(1); 
    setTimeout(function(){console.log(2)}, 1000); 
    setTimeout(function(){console.log(3)}, 0); 
    console.log(4);
})();
// 1 4 3 2
-------------------------------------------

function foo1()
{
  return {
      bar: "hello"
  };
}

function foo2()
{
  return 
  {
      bar: "hello"
  };
}

console.log("foo1 returns:");
console.log(foo1());
console.log("foo2 returns:");
console.log(foo2());

//
foo1 returns:
{ bar: 'hello' }
foo2 returns:
undefined
----------------------------------

var bar = null;
console.log(typeof bar === "object");  // logs true!

-----------------------------------

console.log(false == '0') //true
console.log(false === '0')  //false

--------------------------------
(function(x) {
    return (function(y) {
        console.log(x);
    })(2)
})(1);  //1

--------------------------------

var x = 21;
var girl = function () {
    console.log(x);
    var x = 20;
};
girl ();  //undefined

--------------------------------
var myArray = ['a', 'b', 'c', 'd'];
myArray.push('end');
myArray.unshift('start');
console.log(myArray); // ["start", "a", "b", "c", "d", "end"]
With ES6, one can use the spread operator:

myArray = ['start', ...myArray];
myArray = [...myArray, 'end'];
Or, in short:

myArray = ['start', ...myArray, 'end'];
---------------------------------------
typeof undefined == typeof NULL
The expression will be evaluated to true, since NULL will be treated as any other undefined variable.

Note: JavaScript is case-sensitive and here we are using NULL instead of null.
-----------------------------------------

console.log(typeof typeof 1);
//string

typeof 1 will return "number" and typeof "number" will return string.
--------------------------------------------

for (var i = 0; i < 5; i++) {
	setTimeout(function() { console.log(i); }, i * 1000 );
}

The code sample shown will not display the values 0, 1, 2, 3, and 4 as might be expected; rather, it will display 5, 5, 5, 5, and 5.

Explanation:
Variable i in the Loop:
var declares i with function scope. This means that the same i is used throughout the iterations and within the setTimeout callbacks.

Execution of setTimeout:
setTimeout schedules the callback to execute after the specified delay, but by the time the callbacks are executed, the loop has already completed and i is 5.

What Actually Happens
The setTimeout function creates a closure that captures the reference to i, not its value at the time setTimeout was called.
So when the setTimeout callbacks are executed, they all refer to the same i, which has a final value of 5.

The reason for this is that each function executed within the loop will be executed after the entire loop has completed and all will therefore reference the last value stored in i, which was 5.

Closures can be used to prevent this problem by creating a unique scope for each iteration, storing each unique value of the variable within its scope, as follows:

for (var i = 0; i < 5; i++) {
    (function(x) {
        setTimeout(function() { console.log(x); }, x * 1000 );
    })(i);
}
This will produce the presumably desired result of logging 0, 1, 2, 3, and 4 to the console.

-------------------------------------------------
console.log(typeof NaN === "number");  // logs "true"

console.log(NaN === NaN);  // logs "false"

------------------------------------------------

var b = 1;
function outer(){
   	var b = 2
    function inner(){
        b++;
        var b = 3;
        console.log(b)
    }
    inner();
}
outer();

Output to the console will be “3”.

There are three closures in the example, each with it’s own var b declaration.
When a variable is invoked closures will be checked in order from local to global until an instance is found.
Since the inner closure has a b variable of its own, that is what will be output.
----------------------------------------------

function inner () {
    var b; // b is undefined
    b++; // b is NaN
    b = 3; // b is 3
    console.log(b); // output "3"
}
---------------------------------------------

How do you clone an object?
var obj = {a: 1 ,b: 2}
var objclone = Object.assign({},obj);

Now the value of objclone is {a: 1 ,b: 2} but points to a different object than obj.

Note the potential pitfall, though: Object.assign() will just do a shallow copy, not a deep copy.
This means that nested objects aren’t copied. They still refer to the same nested objects as the original:

let obj = {
    a: 1,
    b: 2,
    c: {
        age: 30
    }
};

var objclone = Object.assign({},obj);
console.log('objclone: ', objclone);

obj.c.age = 45;
console.log('After Change - obj: ', obj);           // 45 - This also changes
console.log('After Change - objclone: ', objclone); // 45
===================================================================================================

1.Write a JavaScript function to calculate the sum of two numbers.  

const sum = (a, b) =>{
  return a+b;
}

console.log(sum(2, 3)); // 5
===================================================================================================

2. Write a JavaScript program to find the maximum number in an array. 

function findMaxNumber(arr) {
  if (arr.length === 0) {
    return undefined;
  }

  let max = [];   // or 0 Initialize max to the first element of the array

  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i]; // Update max if a larger number is found
    }
  }
  return max;
}

console.log(findMaxNumber([3, 6, 9, 1, 8, 23, 110]))
----------------------------------------------------------------using forEach
function findMaxNumber(arr) { 
let maxVal = 0;
let data = arr.forEach((item) =>{
  if(maxVal < item)
  {
    maxVal = item;
  }
});
return maxVal
} 

console.log(findMaxNumber([3, 6, 9, 1, 8, 23, 110]))
---------------------------------------------------------------using method
function findMaxNumber(arr) { 
  return Math.max(…arr); 
} 
===================================================================================================

3. Write a JavaScript function to check if a given string is a palindrome (reads the same forwards and backwards). 

function isPalindrome(str) { 
  return str === str.split('').reverse().join(''); 
}

console.log(isPalindrome("madam"))  //true
---------------------------------------------------using for loop------------------------------------
function isPalindrome(str) { 
let reversedStr= '';
 for(let i=str.length-1; i>=0; i--){
    reversedStr += str[i];  
 }
  return  reversedStr === str;
}
console.log(isPalindrome("madam"))  //true
===================================================================================================

4. Write a JavaScript program to reverse a given string. 

const reverseString = (str) => str.split('').reverse().join(''); 
console.log(reverseString("manoj")) //jonam
===================================================================================================

5.Write a JavaScript function that takes an array of numbers and returns a new array with only the even numbers. 

function filterEvenNumbers(numbers) { 
  return numbers.filter(num => num % 2 === 0); 
}
===================================================================================================

6. Write a JavaScript program to calculate the factorial of a given number. 

function factorial(number) { 
  if (number === 0 || number === 1) { 
    return 1; 
  } else { 
    return number * factorial(number – 1); 
  } 
} 
---------------------------------------------------using for loop---------------
function factorialIterative(n) {
  let result = 1;
  for (let i = 1; i <= n; i++) {
    result *= i;
  }
  return result;
}
const result = factorialIterative(5);
console.log(`The factorial of ${number} is: ${result}`);
===================================================================================================

7. Write a JavaScript function to check if a given number is prime. 

function isPrime(num) { 
  if (num <= 1) return false; 
  for (let i = 2; i <= Math.sqrt(num); i++) { 
    if (num % i === 0) return false; 
  } 
  return true; 
} 

======================================================================================================
function isPrime(num) {
  if (num <= 1) return false;
  for (let i = 2; i < num; i++) {
    if (num % i === 0) return false;
  }
  return true;
}

function printPrimeNumbers(n) {
  for (let i = 2; i <= n; i++) {
    if (isPrime(i)) {
      console.log(i);
    }
  }
}

// Example usage:
printPrimeNumbers(50); // This will print all prime numbers less than or equal to 50

===================================================================================================

8. Write a JavaScript program to find the largest element in a nested array. 

function findLargestInNestedArray(arr) {
  let largest = -Infinity; // Initialize largest with negative infinity

  for (let i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      // If the element is an array, recursively find the largest element in that sub-array
      const largestInSubarray = findLargestInNestedArray(arr[i]);
      if (largestInSubarray > largest) {
        largest = largestInSubarray;
      }
    } else {
      // If the element is a number, compare it to the current largest
      if (arr[i] > largest) {
        largest = arr[i];
      }
    }
  }

  return largest;
}

// Example usage:
const nestedArray = [1, [2, [3, 4], 5], 6, [7, 8, [9]]];
const largestElement = findLargestInNestedArray(nestedArray);
console.log("The largest element in the nested array is: " + largestElement);  // 9

===================================================================================================
9. Write a JavaScript function that returns the Fibonacci sequence up to a given number of terms. 

function generateFibonacci(n) {
  const fibonacciSequence = [];
  if (n >= 1) {
    fibonacciSequence.push(0);
  }
  if (n >= 2) {
    fibonacciSequence.push(1);
  }
  for (let i = 2; i < n; i++) {
    const nextNumber = fibonacciSequence[i - 1] + fibonacciSequence[i - 2];
    fibonacciSequence.push(nextNumber);
  }
  return fibonacciSequence;
}

// Example usage:
const fibonacciSequence = generateFibonacci(10);
console.log("Fibonacci sequence up to " + numTerms + " terms: " + fibonacciSequence); // 0,1,1,2,3,5,8,13,21,34


===================================================================================================
10. Write a JavaScript program to convert a string to title case (capitalize the first letter of each word). 

function toTitleCase(inputString) {
  const words = inputString.split(' ');
  const titleCaseWords = [];

  for (const word of words) {
    // Capitalize the first letter and add the rest of the word in lowercase
    titleCaseWords.push(word.charAt(0).toUpperCase() + word.slice(1).toLowerCase());
  }
  return titleCaseWords.join(' ');
}

---------------------------------------------------------
function toTitleCase1(str) { 
  return str.replace(/\b\w/g, l => l.toUpperCase()); 
} 

console.log(toTitleCase1("hello manoj")); //Hello Manoj

const inputString = "hello world";
const titleCaseString = toTitleCase(inputString);  
console.log("Original String: " + inputString);  //Original String: hello world
console.log("Title Case String: " + titleCaseString);  //Title Case String: Hello World

===================================================================================================
1. Implement a debounce function in JavaScript that limits the frequency of a function’s execution when it’s called repeatedly within a specified time frame. 

Sample answer: By delaying the execution of the debounce function until the specified time frame has passed, the frequency can be limited. 

function debounce(func, delay) {
  let timeoutId;
  return function (...args) {
    const context = this;
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => {
      func.apply(context, args);
    }, delay);
  };
}

// Example usage:
function saveToServer(value) {
  console.log(`Saving "${value}" to the server...`);
  // Simulate a server request (in real use, you would make an AJAX request)
}

const debouncedSave = debounce(saveToServer, 1000); // Limit to one call per second

// Simulated user input
debouncedSave("Data 1");
debouncedSave("Data 2");
debouncedSave("Data 3");

// Only the last call will be executed after 1000ms (1 second)
===================================================================================================
2. Write a function that takes an array of objects and a key, and returns a new array sorted based on the values of that key in ascending order.
Sample answer: The following function takes an array of objects and a key to sort the array based on the values in ascending order. 

function sortByKey(arr, key) { 
  return arr.sort((a, b) => a[key] - b[key]); 
} 

----------------------------------------------------------

function sortByKeyAscending(arr, key) {
  return arr.slice().sort((a, b) => {
    const valueA = a[key];
    const valueB = b[key];

    if (valueA < valueB) {
      return -1;
    } else if (valueA > valueB) {
      return 1;
    } else {
      return 0;
    }
  });
}

// Example usage:
const people = [
  { name: "Alice", age: 30 },
  { name: "Bob", age: 25 },
  { name: "Eve", age: 35 }
];

const sortedPeople = sortByKeyAscending(people, "age");
console.log(sortedPeople);
===================================================================================================
3. Implement a deep clone function in JavaScript that creates a copy of a nested object or array without any reference to the original. 
By using two methods together and creating a deep clone, I can serialize the object to a JSON string.
I would then parse it back into a new object, thereby removing any reference to the original object. 

function deepClone(obj) {
  // Serialize the object to a JSON string and then parse it back into a new object
  return JSON.parse(JSON.stringify(obj));
}

// Example usage:
const originalObject = {
  name: "John",
  age: 30,
  address: {
    street: "123 Main St",
    city: "Exampleville"
  }
};

const clonedObject = deepClone(originalObject);

console.log("Original Object:", originalObject);
console.log("Cloned Object:", clonedObject);

// Modify the cloned object to demonstrate independence from the original
clonedObject.name = "Jane";
clonedObject.address.city = "Clonetown";

console.log("Modified Cloned Object:", clonedObject);
console.log("Original Object (unchanged):", originalObject);

---------------------------------------------------------------
Original Object: {
  name: 'John',
  age: 30,
  address: { street: '123 Main St', city: 'Exampleville' }
}
Cloned Object: {
  name: 'John',
  age: 30,
  address: { street: '123 Main St', city: 'Exampleville' }
}
Modified Cloned Object: {
  name: 'Jane',
  age: 30,
  address: { street: '123 Main St', city: 'Clonetown' }
}
Original Object (unchanged): {
  name: 'John',
  age: 30,
  address: { street: '123 Main St', city: 'Exampleville' }
}


===================================================================================================
4. Write a recursive function to calculate the factorial of a given number. 

function factorial(n) {
  if (n === 0 || n === 1) {
    return 1; // Base case: 0! and 1! are both defined as 1
  } else {
    return n * factorial(n - 1); // Recursive call for n! = n * (n-1)!
  }
}

// Example usage:
const number = 5;
const result = factorial(number);
console.log(`The factorial of ${number} is: ${result}`);
===================================================================================================
5. Implement a function that takes two sorted arrays and merges them into a single sorted array without using any built-in sorting functions. 

function mergeSortedArrays(arr1, arr2) { 
  return [...arr1, ...arr2].sort((a, b) => a - b); 
} 

console.log(mergeSortedArrays(['3', '6', '0', '5'], ['8', '2', '6', '5']))  //['0', '2', '3','5', '5', '6','6', '8']
-------------------------------------------------------------------------

function mergeSortedArrays(arr1, arr2) {
  const mergedArray = [];
  let i = 0; // Pointer for arr1
  let j = 0; // Pointer for arr2

  // Loop until one of the arrays is fully processed
  while (i < arr1.length && j < arr2.length) {
    if (arr1[i] < arr2[j]) {
      mergedArray.push(arr1[i]);
      i++;
    } else {
      mergedArray.push(arr2[j]);
      j++;
    }
  }

  // Add remaining elements from arr1 (if any)
  while (i < arr1.length) {
    mergedArray.push(arr1[i]);
    i++;
  }

  // Add remaining elements from arr2 (if any)
  while (j < arr2.length) {
    mergedArray.push(arr2[j]);
    j++;
  }

  return mergedArray;
}

// Example usage:
const sortedArray1 = [1, 3, 5, 7];
const sortedArray2 = [2, 4, 6, 8];
const mergedArray = mergeSortedArrays(sortedArray1, sortedArray2);
console.log("Merged Sorted Array:", mergedArray); // [1,2,3,4,5,6,7,8]

===================================================================================================
8. Implement a function that flattens a nested array in JavaScript, converting it into a single-level array. 

const flattenArray = (nestedArray) => { 
  return nestedArray.flat(Infinity); 
}; 
------------------------------------------------------
function flattenArray(arr) {
  const flattened = [];

  function recursiveFlatten(arr) {
    for (const element of arr) {
      if (Array.isArray(element)) {
        recursiveFlatten(element); // Recurse into nested array
      } else {
        flattened.push(element); // Add non-array elements to the result
      }
    }
  }

  recursiveFlatten(arr);
  return flattened;
}

// Example usage:
const nestedArray = [1, [2, 3, [4, 5]], 6, [7, 8]];
const flatArray = flattenArray(nestedArray);
console.log("Flattened Array:", flatArray);

===================================================================================================
9. Write a function that determines if two strings are anagrams of each other  

function areAnagrams(str1, str2) {
  // Remove spaces and convert to lowercase
  const cleanStr1 = str1.replace(/\s/g, '').toLowerCase();
  const cleanStr2 = str2.replace(/\s/g, '').toLowerCase();

  // Check if the sorted character arrays are the same
  return cleanStr1.split('').sort().join('') === cleanStr2.split('').sort().join('');
}

// Example usage:
const string1 = "listen";
const string2 = "silent";
console.log(`"${string1}" and "${string2}" are anagrams: ${areAnagrams(string1, string2)}`);

-------------------------------------------------
function areAnagrams(str1, str2) { 
  return str1.split(“”).sort().join(“”) === str2.split(“”).sort().join(“”); 
} 



===================================================================================================
10. Create a JavaScript function that returns the Fibonacci sequence up to a given number, utilizing memoization for optimized performance. 

function fibonacciWithMemoization(n) { 
  let memo = [0, 1]; 
  for (let i = 2; i <= n; i++) { 
    memo[i] = memo[i - 1] + memo[i - 2]; 
  } 
  return memo; 
} 

console.log(fibonacciWithMemoization(10))
-----------------------------------------------------------------------------------------

function generateFibonacciMemoized(n, memo = {}) {
  if (n in memo) {
    return memo[n]; // Return the cached value if available
  }

  if (n <= 2) {
    return 1; // Base case for Fibonacci
  }

  // Calculate the Fibonacci number and store it in the memo cache
  memo[n] = generateFibonacciMemoized(n - 1, memo) + generateFibonacciMemoized(n - 2, memo);

  return memo[n];
}

// Example usage:
const numTerms = 10;
const fibonacciSequence = [];

for (let i = 1; i <= numTerms; i++) {
  fibonacciSequence.push(generateFibonacciMemoized(i));
}

console.log("Fibonacci sequence up to " + numTerms + " terms:", fibonacciSequence);

===================================================================================================
Given an array of numbers, write a function to find the largest and smallest numbers in the array. 

function findMinMax(arr) { 
  let min = Math.min(...arr); 
  let max = Math.max(...arr); 
  return [min, max]; 
}
-------------------------------------------------------
function findLargestAndSmallestNumbers(arr) {
  if (arr.length === 0) {
    return "The array is empty.";
  }

  let largest = arr[0];
  let smallest = arr[0];

  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > largest) {
      largest = arr[i];
    } else if (arr[i] < smallest) {
      smallest = arr[i];
    }
  }

  return {
    largest: largest,
    smallest: smallest
  };
}

// Example usage:
const numbers = [10, 5, 8, 17, 3, 21, 12];
const result = findLargestAndSmallestNumbers(numbers);
console.log("Largest Number: " + result.largest);
console.log("Smallest Number: " + result.smallest);
===================================================================================================
4. Write a function that takes an array of integers as input and returns a new array with only the unique elements. 

function getUniqueElements(arr) { 
  return Array.from(new Set(arr)); 
} 
console.log(getUniqueElements([2, 3, 5, 2, 8, 5, 9, 3, 10])) //[ 2, 3, 5, 8, 9, 10 ]
-------------------------------------------------------------------------------------
function getUniqueElements(arr) {
  const uniqueArray = [];

  for (const element of arr) {
    if (!uniqueArray.includes(element)) {
      uniqueArray.push(element);
    }
  }

  return uniqueArray;
}

// Example usage:
const numbers = [2, 3, 5, 2, 8, 5, 9, 3, 10];
const uniqueNumbers = getUniqueElements(numbers);
console.log("Original Array: " + numbers);  //Original Array: 2,3,5,2,8,5,9,3,10
console.log("Unique Elements: " + uniqueNumbers);  //Unique Elements: 2,3,5,8,9,10

===================================================================================================
6. Write a function that determines if a given number is prime or not. 

function isPrime(num) { 
  if (num <= 1) return false; 
  for (let i = 2; i <= Math.sqrt(num); i++) { 
    if (num % i === 0) return false; 
  } 
  return true; 
} 

console.log(isPrime(5)); //true

===================================================================================================
7. Implement a function to find the sum of all the numbers in an array. 

function findSum(arr) { 
  return arr.reduce((sum, num) => sum + num, 0); 
} 

console.log(findSum([3, 7, 9, 5, 6]))
--------------------------------------------------------------------
function sumArray(arr) {
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
  }
  return sum;
}

// Example usage:
const numbers = [1, 2, 3, 4, 5];
const totalSum = sumArray(numbers);
console.log("Sum of the numbers in the array: " + totalSum);


===================================================================================================
8. Given a string, write a function to count the occurrences of each character in the string. 

function countCharacterOccurrences(str) { 
  const charCount = {}; 

  for (let char of str) { 
   if (charCount[char]) {
      charCount[char]++;
    } else {
      charCount[char] = 1;
    }
  } 
  return charCount; 
} 

console.log(countCharacterOccurrences("programming")) //{ p: 1, r: 2, o: 1, g: 2, a: 1, m: 2, i: 1, n: 1 }

===================================================================================================
9. Implement a function to remove duplicates from an array. 

function removeDuplicates(arr) { 
  return Array.from(new Set(arr)); 
} 

function removeDuplicates(arr) { 
  return [...new Set(arr)]; 
} 

console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5])) //[ 1, 2, 3, 4, 5 ]

===================================================================================================
1. Write a function that reverses the order of words in a sentence without using the built-in reverse() method. 

function reverseWords(sentence) {
  // Step 1: Split the sentence into an array of words
  const words = sentence.split(' ');
  
  // Step 2: Reverse the array using a for loop
  const reversedWords = [];
  for (let i = words.length - 1; i >= 0; i--) {
    reversedWords.push(words[i]);
  }
  
  // Step 3: Join the reversed array into a sentence
  return reversedWords.join(' ');
}

// Example usage
const sentence = "Hello world this is a test";
const reversedSentence = reverseWords(sentence);
console.log(reversedSentence); // Output: "test a is this world Hello"

--------------------------------------------------------------------------------------------------

function reverseSentence(sentence) { 
  const words = sentence.split(" "); 
  const reversedWords = words.reverse(); 
  return reversedWords.join(" "); 
} 

console.log(reverseSentence("Hello, world! How are you?"))  //you? are How world! Hello,

===================================================================================================
 Write a function that takes an array of integers and returns the largest difference between any two numbers in the array. 

function largestDifference(arr) {
  if (arr.length < 2) {
    return 0; // No difference if there are fewer than 2 elements
  }

  let min = arr[0];
  let maxDiff = arr[1] - arr[0];

  for (let i = 1; i < arr.length; i++) {
    const currentNum = arr[i];
    maxDiff = Math.max(maxDiff, currentNum - min);
    min = Math.min(min, currentNum);
  }

  return maxDiff;
}

// Example usage:
const numbers = [7, 1, 5, 3, 6, 4];
const difference = largestDifference(numbers);
console.log("Largest Difference: " + difference);  //5

===================================================================================================
4. Implement a function that removes duplicates from an array, keeping only the unique elements. 

function removeDuplicates(arr) { 
  return arr.filter((item, index) => arr.indexOf(item) === index); 
} 

console.log(removeDuplicates([1, 2, 2, 3, 4, 4, 5]))

===================================================================================================
8. Implement a function that finds the second smallest element in an array of integers. 

function secondSmallest(arr) { 
  const sortedArr = arr.sort((a, b) => a – b); 
  return sortedArr[1]; 
} 
console.log(secondSmallest([1, 2, 2, 3, 4, 4, 5])) //2

===================================================================================================
9. Write a function that generates a random alphanumeric string of a given length

function generateRandomAlphanumericString(length) {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let randomString = '';

  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    randomString += characters.charAt(randomIndex);
  }

  return randomString;
}

// Example usage:
const randomString = generateRandomAlphanumericString(10);
console.log("Random Alphanumeric String: " + randomString);


===================================================================================================
7. Write a function that removes all falsy values (false, null, 0, “”, undefined, and NaN) from an array. 

function removeFalsyValues(arr) { 
  return arr.filter(Boolean); 
} 

function removeFalsyValues(arr) {
  return arr.filter(value => !!value);
}

// Example usage:
const originalArray = [0, 1, false, true, '', 'Hello', null, undefined, NaN];
const filteredArray = removeFalsyValues(originalArray);
console.log("Original Array: " + JSON.stringify(originalArray));
console.log("Array with Falsy Values Removed: " + JSON.stringify(filteredArray));
===================================================================================================
8. Implement a function that merges two arrays into a single array, alternating elements from each array. 

function mergeArrays(array1, array2) { 
  const mergedArray = []; 
  const maxLength = Math.max(array1.length, array2.length); 
  for (let i = 0; i < maxLength; i++) { 
    if (i < array1.length) mergedArray.push(array1[i]); 
    if (i < array2.length) mergedArray.push(array2[i]); 
  } 
  return mergedArray; 
} 

===================================================================================================
9. Write a function that finds the second largest number in an array.


function findSecondLargest(arr) { 
  arr.sort((a, b) => b - a); 
  return arr[1]; 
} 


const numbers = [5, 3, 9, 1, 2, 8]; 
const secondLargest = findSecondLargest(numbers);
console.log("Second Largest Element: " + secondLargest);  //8

===================================================================================================
Given a string, reverse each word in the sentence

const reverseWord = (input) =>{
  let splittedinput = input.split(" ");
  let result = '';
  
  for(let word of splittedinput){
     for(let i=word.length-1; i>=0; i--){
       result += word[i];
     }
     result +=  ' ';
  }
  return result;
}

console.log(reverseWord("Commonly Asked Javascript Question")); 


 ===================================================================================================
Flatten an Array

 let flattenArray = (arr) =>{
   let result = [];
    arr.forEach((item) =>{
   if(Array.isArray(item)){
     result.push(...flattenArray(item));
   }
   else{
     result.push(item);
   }
 })
 return result
 }
 
 console.log(flattenArray([1, 2, 3, [4, 5, [6, 7, [8]], 9], 10]))
 
 let data = [1, 2, 3, [4, 5, [6, 7, [8]], 9], 10];
 
console.log( data.flat(Infinity))
===================================================================================================

CURRYING

function sum(x) {
  return function(y){
      return x+y;
  }
}
console.log(sum(2)(3))  //5
--------------------------
ES6 arr functions

const sum = x => y =>{
    return x+y;
}

console.log(sum(2)(3))  //5

----------------------------------
INFINITE CURRYING

function sum(x) {
  return function(y){
    if(y){
      return sum(x+y);
    }
    return x;
  }
}

console.log(sum(2)(3)(4)(5)())  //14
----------------------------------------
ES6 arr functions

const sum = x => y =>{
  if(y){
    return sum(x+y);
  }
  return x;
}
console.log(sum(2)(3)(4)(5)())  //14
===================================================================================================
Given a string, return all possible distinct substrings
Input: “Cat”
Output: [ 'C', 'Ca', 'Cat', 'a', 'at', 't' ]

const substring = (s) =>{
  let result = new Set();
  
  for(let i= 0; i<s.length; i++){
    let data = "";
    for(let j= i; j<s.length; j++){
      data += s[j];
      result.add(data);
    }
  }
  return Array.from(result);
}

console.log(substring("cat"))


