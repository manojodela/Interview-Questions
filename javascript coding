1. *Program to find the longest word in a given sentence.*

const findLongestWord = (sentence) => {
    const words = sentence.split(" ");
    let maxword = ""; // Initialize as an empty string
    for(let i = 0; i < words.length; i++){
        if(words[i].length > maxword.length){
            maxword = words[i];
        }
    }
    return { word: maxword, length: maxword.length };
}

const response = findLongestWord("Hi Iam Manojodela Iam a UI Developer"); 
console.log(response); // Output: { word: 'Manojodela', length: 10 }
-------------------------------------------------------------------------------------------------------------------

2. *How to check if a string is a palindrome or not?*

const isPalindrome = (str) => {
    const cleanedStr = str.toLowerCase().replace(/[^a-z0-9]/g, ''); // Clean and normalize the string
    const reversedStr = cleanedStr.split('').reverse().join(''); // Reverse the string
    return cleanedStr === reversedStr; // Check if the original string is the same as the reversed one
}


const isPalindrome = (str) => { 
    let cleanedStr = '';
    let reversedStr = '';

    // Clean the string: remove non-alphanumeric characters and convert to lowercase
    for (let i = 0; i < str.length; i++) {
        const char = str[i].toLowerCase();
        if ((char >= 'a' && char <= 'z') || (char >= '0' && char <= '9')) {
            cleanedStr += char;
        }
    }

    // Reverse the cleaned string using the existing logic
    for(let i = cleanedStr.length - 1; i >= 0; i--){
        reversedStr += cleanedStr[i];  
    }

    // Compare the cleaned string with its reversed version
    return reversedStr === cleanedStr;
}

console.log(isPalindrome("racecar")); // Output: true
console.log(isPalindrome("hello"));    // Output: false
console.log(isPalindrome("A man a plan a canal Panama")); // Output: true
--------------------------------------------------------------------------------------------------------------------------

3. *Write a program to remove duplicates from an array.*

const removeDuplicates = (arr) => {
    return [...new Set(arr)];
}

const removeDuplicates = (arr) => {
    let uniqueArr = [];
    for (let i = 0; i < arr.length; i++) {
        if (uniqueArr.indexOf(arr[i]) === -1) {
            uniqueArr.push(arr[i]);
        }
    }
    return uniqueArr;
}

const numbers = [1, 2, 3, 4, 3, 2, 5, 6, 1];
console.log(removeDuplicates(numbers)); // Output: [1, 2, 3, 4, 5, 6]
-------------------------------------------------------------------------------------------------------------------------------------

4. *Program to reverse a string without using the built-in reverse() method.*

const reverseString = (str) => {
    return str.split('').reverse().join('');
}

const reverseString = (str) => {
    let reversedStr = '';
    for (let i = str.length - 1; i >= 0; i--) {
        reversedStr += str[i];
    }
    return reversedStr;
}

console.log(reverseString("hello")); // Output: "olleh"
console.log(reverseString("JavaScript")); // Output: "tpircSavaJ"
---------------------------------------------------------------------------------------------------------------------------------------------

5. *Find the maximum count of consecutive 1â€™s in a binary array.*

const findMaxConsecutiveOnes = (arr) => {
    let maxCount = 0;
    let currentCount = 0;

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === 1) {
            currentCount++;
            if (currentCount > maxCount) {
                maxCount = currentCount;
            }
        } else {
            currentCount = 0;
        }
    }

    return maxCount;
}

const binaryArray = [1, 1, 0, 1, 1, 1];
console.log(findMaxConsecutiveOnes(binaryArray)); // Output: 3
--------------------------------------------------------------------------------------------------------------------------------------------------


6. *Write a program to find the factorial of a given number.*

const factorial = (n) => {
    let result = 1;
    for (let i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

const factorial = (n) => {
    if (n === 0 || n === 1) {
        return 1;
    }
    return n * factorial(n - 1);
}



console.log(factorial(5)); // Output: 120
console.log(factorial(0)); // Output: 1 (0! is defined as 1)
--------------------------------------------------------------------------------------------------------------------------------------------------------

7. *Given two sorted arrays [0, 3, 4, 31] and [4, 6, 30], merge them into a sorted array [0, 3, 4, 4, 6, 30, 31].*

function mergeSortedArrays(arr1, arr2) { 
  return [...arr1, ...arr2].sort((a, b) => a - b); 
} 

const mergeSortedArrays = (arr1, arr2) => {
    let mergedArray = [];
    let i = 0;
    let j = 0;

    // Merge the arrays until one of them is exhausted
    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            mergedArray.push(arr1[i]);
            i++;
        } else {
            mergedArray.push(arr2[j]);
            j++;
        }
    }

    // If there are remaining elements in arr1, add them to mergedArray
    while (i < arr1.length) {
        mergedArray.push(arr1[i]);
        i++;
    }

    // If there are remaining elements in arr2, add them to mergedArray
    while (j < arr2.length) {
        mergedArray.push(arr2[j]);
        j++;
    }

    return mergedArray;
}

const arr1 = [0, 3, 4, 31];
const arr2 = [4, 6, 30];
console.log(mergeSortedArrays(arr1, arr2)); 
// Output: [0, 3, 4, 4, 6, 30, 31]
-----------------------------------------------------------------------------------------------------------------------------------


8. *Create a function that accepts two arrays arr1 and arr2. The function should return true if every value in arr1 has its corresponding value squared in arr2. The frequency of values must be the same.*

const sameFrequencySquared = (arr1, arr2) => {
    if (arr1.length !== arr2.length) {
        return false;
    }

    // Create frequency maps
    let frequencyMap1 = {};
    let frequencyMap2 = {};

    for (let num of arr1) {
        frequencyMap1[num] = (frequencyMap1[num] || 0) + 1;
    }

    for (let num of arr2) {
        frequencyMap2[num] = (frequencyMap2[num] || 0) + 1;
    }

    // Compare frequency maps
    for (let key in frequencyMap1) {
        let squaredKey = key ** 2;
        if (frequencyMap2[squaredKey] !== frequencyMap1[key]) {
            return false;
        }
    }

    return true;
}

console.log(sameFrequencySquared([1, 2, 3], [1, 4, 9])); // Output: true
console.log(sameFrequencySquared([1, 2, 3], [1, 9])); // Output: false
console.log(sameFrequencySquared([1, 2, 1], [4, 4, 1])); // Output: false
console.log(sameFrequencySquared([1, 2, 1], [1, 4, 1])); // Output: true
----------------------------------------------------------------------------------------------------------------------------------------------------
9. *Given two strings, find out if one string can be formed by rearranging the letters of the other string (Anagram problem).*

const isAnagram = (str1, str2) => {
    // If lengths are not equal, they cannot be anagrams
    if (str1.length !== str2.length) {
        return false;
    }

    // Sort both strings and compare them
    const sortedStr1 = str1.split('').sort().join('');
    const sortedStr2 = str2.split('').sort().join('');

    return sortedStr1 === sortedStr2;
}



function isStringCreated(str1, str2) {
  if (str1.length !== str2.length) return false;

  let freq = {};

  // Count the frequency of each character in str1
  for (let val of str1) {
    freq[val] = (freq[val] || 0) + 1;
  }

  // Decrease the frequency based on str2
  for (let val of str2) {
    if (freq[val]) {
      freq[val] -= 1;
    } else {
      return false; // If char not found or frequency becomes negative
    }
  }

  return true; // All characters matched
}

console.log(isStringCreated('anagram', 'nagaram')); // Output: true

console.log(isStringCreated("listen", "silent")); // Output: true
console.log(isAnagram("hello", "world"));   // Output: false
---------------------------------------------------------------------------------------------------------------------------------------------------------

10. *Write logic to get unique objects from the following array:*
   javascript
   I/P: [{name: "sai"}, {name: "Nang"}, {name: "sai"}, {name: "Nang"}, {name: "111111"}];
   O/P: [{name: "sai"}, {name: "Nang"}, {name: "111111"}];

function getUniqueArr(array){
const uniqueArr = [];
const seen = {};
  for(let i=0; i<=array.length-1;i++){
  const currentItem = array[i].name;
    if(!seen[currentItem]){
    uniqueArr.push(array[i]);
    seen[currentItem] = true;
    }
  }
return uniqueArr;
}

let arr = [{name: "sai"},{name:"Nang"},{name: "sai"},{name:"Nang"},{name:"111111"}];
console.log(getUniqueArr(arr))

const getUniqueObjects = (arr) => {
    const uniqueNames = new Set();
    return arr.filter(obj => {
        if (!uniqueNames.has(obj.name)) {
            uniqueNames.add(obj.name);
            return true;
        }
        return false;
    });
}

const inputArray = [
    { name: "sai" },
    { name: "Nang" },
    { name: "sai" },
    { name: "Nang" },
    { name: "111111" }
];

const uniqueObjects = getUniqueObjects(inputArray);
console.log(uniqueObjects); 
// Output: [{name: "sai"}, {name: "Nang"}, {name: "111111"}]
----------------------------------------------------------------------------------------------------------------------------------------
   
11. *Write a JavaScript program to find the maximum number in an array.*

const findMax = (arr) => {
    return Math.max(...arr);
}

const numbers = [10, 20, 5, 3, 99, 65];
console.log(findMax(numbers)); // Output: 99

const findMax = (arr) => {
    let max = arr[0]; // Initialize max to the first element in the array
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

const numbers = [10, 20, 5, 3, 99, 65];
console.log(findMax(numbers)); // Output: 99
--------------------------------------------------------------------------------------------------------------------------------------------
12. *Write a function that takes an array of numbers and returns a new array with only the even numbers.*

const filterEvenNumbers = (arr) => {
    return arr.filter(number => number % 2 === 0);
}

const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log(filterEvenNumbers(numbers)); // Output: [2, 4, 6, 8, 10]


const filterEvenNumbers = (arr) => {
    let evenNumbers = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] % 2 === 0) {
            evenNumbers.push(arr[i]);
        }
    }
    return evenNumbers;
}

const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log(filterEvenNumbers(numbers)); // Output: [2, 4, 6, 8, 10]

------------------------------------------------------------------------------------------------------------------------------------------------
13. *Write a JavaScript function to check if a given number is prime.*

const isPrime = (num) => {
    if (num <= 1) return false; // 0 and 1 are not prime numbers
    if (num === 2) return true; // 2 is the only even prime number

    for (let i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) {
            return false; // If num is divisible by any number other than 1 and itself, it's not prime
        }
    }
    return true; // If no divisors were found, the number is prime
}

console.log(isPrime(7));  // Output: true
console.log(isPrime(10)); // Output: false
console.log(isPrime(11)); // Output: true
console.log(isPrime(1));  // Output: false
console.log(isPrime(2));  // Output: true

=-------------------------------------------------------------------------------------------------------------------------
14. *Write a program to find the largest element in a nested array. Example input: [[3, 4, 58], [709, 8, 9, [10, 11]], [111, 2]].*

const findLargestInNestedArray = (arr) => {
    let largest = -Infinity;

    const findLargest = (nestedArr) => {
        for (let element of nestedArr) {
            if (Array.isArray(element)) {
                findLargest(element); // Recursively check nested arrays
            } else {
                if (element > largest) {
                    largest = element; // Update largest if current element is greater
                }
            }
        }
    }

    findLargest(arr);
    return largest;
}

const inputArray = [[3, 4, 58], [709, 8, 9, [10, 11]], [111, 2]];
console.log(findLargestInNestedArray(inputArray)); // Output: 709
-------------------------------------------------------------------------------------------------------------------

15. *Write a function that returns the Fibonacci sequence up to a given number of terms.*

function fibonacciSequence(num) {
    let fibSequence = [0, 1];
    
    if (num === 1) {
        return [0];
    } else if (num === 2) {
        return fibSequence;
    }
    
    for (let i = 2; i < num; i++) {
        fibSequence.push(fibSequence[i - 1] + fibSequence[i - 2]);
    }
    
    return fibSequence;
}

// Example usage:
console.log(fibonacciSequence(10)); // Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

---------------------------------------------------------------------------------------------------------------------------------------------
16. *Given a string, write a function to count the occurrences of each character in the string.*

function countCharacterOccurrences(str) {
    let charCount = {};

    for (let char of str) {
        if (charCount[char]) {
            charCount[char]++;
        } else {
            charCount[char] = 1;
        }
    }

    return charCount;
}

// Example usage:
console.log(countCharacterOccurrences("hello world"));
-----------------------------------------------------------------------------------------------------------------------------------------------------


17. *Write a function that sorts an array of numbers in ascending order.*

function sortArrayAscending(arr) {
    return arr.sort((a, b) => a - b);
}

function sortArrayAscending(arr) {
    for (let i = 0; i < arr.length - 1; i++) {
        for (let j = 0; j < arr.length - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap the elements
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

// Example usage:
console.log(sortArrayAscending([5, 3, 8, 1, 2])); // Output: [1, 2, 3, 5, 8]
-------------------------------------------------------------------------------------------------------------------------------------------------------

18. *Write a function that sorts an array of numbers in descending order.*

function sortArrayDescending(arr) {
    for (let i = 0; i < arr.length - 1; i++) {
        for (let j = 0; j < arr.length - 1 - i; j++) {
            if (arr[j] < arr[j + 1]) {
                // Swap the elements
                let temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}

// Example usage:
console.log(sortArrayDescending([5, 3, 8, 1, 2])); // Output: [8, 5, 3, 2, 1]
-------------------------------------------------------------------------------------------------------------------------------------------------------
19. *Write a function that reverses the order of words in a sentence without using the built-in reverse() method.*

function reverseWordsInSentence(sentence) {
    let words = sentence.split(' ');
    let reversedSentence = '';

    for (let i = words.length - 1; i >= 0; i--) {
        reversedSentence += words[i];
        if (i > 0) {
            reversedSentence += ' ';
        }
    }

    return reversedSentence;
}

// Example usage:
console.log(reverseWordsInSentence("Hello world this is a test")); // Output: "test a is this world Hello"
----------------------------------------------------------------------------------------------------------------------------------------------------------------
20. *Implement a function that flattens a nested array into a single-dimensional array.*

const flattenArray = (arr) =>{
    let result = [];
    const nestFunction = (arr) => {
        for(let i=0; i< arr.length; i++){
            if(Array.isArray(arr[i])){
                nestFunction(arr[i]);
            }else{
                result.push(arr[i]);
            }
        }
    }
    nestFunction(arr);
    return result;
}


console.log(flattenArray([1, [2, [3, 4], 5], 6])); 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. *Write a function that converts a string input into an object. Example input: "a.b.c", "someValue". Output: {a: {b: {c: "someValue"}}}.*

function stringToNestedObject(path, value) {
    let keys = path.split('.'); // Split the string by dots to get the keys
    let result = {}; // Initialize the final object
    let current = result; // Start with the final object

    for (let i = 0; i < keys.length; i++) {
        let key = keys[i];

        if (i === keys.length - 1) {
            // If it's the last key, set the value
            current[key] = value;
        } else {
            // Otherwise, create a new object and move to the next level
            current[key] = {};
            current = current[key];
        }
    }

    return result;
}

// Example usage:
console.log(stringToNestedObject("a.b.c", "someValue"));
// Output: {a: {b: {c: "someValue"}}}
